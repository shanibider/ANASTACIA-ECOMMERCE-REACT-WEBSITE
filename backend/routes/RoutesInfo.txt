Client and Server structure -


Routes (backend) -
For example -
1. The client-side component (ProductScreen.js) triggers a request to the server by making a GET request to '/api/products/slug/${slug}'.
2. The server-side route (productRoutes.js) handles this request, retrieves product details based on the 'slug' from the database, and sends the details back to the client.
3. The client-side component processes the response and updates its state accordingly.



In server.js:
    app.use ('/api/seed', seedRouter);
    app.use ('/api/products', productRouter);
    app.use ('/api/users', userRouter);     // userRouter responds to api/users
    app.use ('/api/orders', orderRouter);

By using app.use with different base paths, the API is structure in a modular way.
Each router (seedRouter, productRouter, userRouter, orderRouter) is responsible for a specific set of functionalities,
and the specified paths indicate where those functionalities are accessible within the overall API.
This organization makes the code more maintainable and scalable, as each component has its own set of routes and handlers.

In simpler terms, think of app.use as a way to tell Express where to find different parts of your application. It helps in keeping your code organized, readable,
and scalable by neatly structuring your routes based on different functionalities.




In userRoutes.js (backend):
    const userRouter = express.Router();            // Instance of an Express router
    
     // Route to handle user sign-in
    userRouter.post(
    '/signin',
    expressAsyncHandler(async (req, res) => {
        ...
    }));


userRouter is a dedicated router that you can use to organize and manage routes specifically related to user-related functionality (e.g., user authentication, user profiles, etc.) in your web application
Helps in keeping the code organized, separating concerns related to users from other parts of the app.




In SigninScreen.js (frontend):
    const submitHandler = async (e) => {
        // POST request to backend
        const { data } = await Axios.post ('/api/users/signin', {
            email,
            password,
        });
            ...
    };