import express from 'express';
import expressAsyncHandler from 'express-async-handler';
import {
  createUserWithEmailAndPassword,
  signInWithEmailAndPassword,
  updatePassword,
} from 'firebase/auth';
import { auth, db } from '../firebase.js';
import {
  addDoc,
  collection,
  limit,
  query,
  where,
  getDocs,
} from 'firebase/firestore';
import { isAuth, isAdmin, generateToken } from '../utils.js';


// Server-side route is responsible for handling user-related functionalities, like user registration, login, authentication, and user profile management.

// Create an Express router for handling user-related routes
const userRouter = express.Router();


// Route to fetch all users (Admin only)
userRouter.get(
  '/',
  isAuth,
  isAdmin,
  expressAsyncHandler(async (req, res) => {
          // Fetch all users from MongoDB (User is the MongoDB model)
    const users = await User.find({});
    res.send(users);
  })
);


// Route to handle user sign-in
userRouter.post(
  '/signin',
  expressAsyncHandler(async (req, res) => {
      // Sign in with email and password using Firebase authentication
      signInWithEmailAndPassword(auth, req.body.email, req.body.password)
      .then((userCredential) => {
        console.log(userCredential.user.uid);

        // Retrieve user details from Firestore based on userId.
        // db is Firestore instance, and userRef is reference to 'users' collection.
        const usersRef = collection(db, 'users');

        //q It's a query object representing the specified conditions below -
        // query is function from Firebase SDK that creates a query. Takes collection reference (usersRef) and additional query constraints.
        const q = query(
          usersRef,
          limit(1),                   // limits the query to return only one document.
          where('userId', '==', userCredential.user.uid)  // adds a query constraint to filter documents where the 'userId' field is equal to the UID (User ID) obtained from the authentication credentials (userCredential.user.uid).
        );


        // this code retrieves user data from Firestore based on the user's UID obtained from Firebase authentication (userCredential.user.uid).
        // The query ensures that only one document is retrieved, and the retrieved data is then used to construct a user object.

        // syntax in deatils:
        // getDocs is function from Firebase SDK that retrieves documents from Firestore based on the provided query.
        // q is the query object specifying the conditions.
        // then((querySnapshot) => ...: It's a Promise-based approach. When the getDocs operation is completed, it returns a 'querySnapshot' containing the results.
        getDocs(q).then((querySnapshot) =>
        // iterates through each document in the querySnapshot.
          querySnapshot.forEach ( (doc) => {
            // retrieves the data of the current document
            const refUser = doc.data();
            // creates a new user object using data from Firestore.
            const user = {
              _id: refUser.userId,
              name: refUser.FullName,
              email: req.body.email,
              isAdmin: refUser.is_admin,
              password: req.body.password,
            };

            console.log(user);
            console.log('Login Success');


             // Send user details along with a token as a response.
             // token is a secure way to represent the user's identity and authorization details.
            res.send({
              _id: user._id,
              name: user.name,
              email: user.email,
              isAdmin: user.isAdmin,
              password: user.password,
              token: generateToken(user),     //  a token property is being assigned a value generated by the generateToken function. This token is typically a JSON Web Token (JWT).
            });
          })
        );

      })
      .catch((error) => {
        console.log(error);
        res.status(401).send({ message: 'Invalid email or password' });
      });
  })
);





// Route to handle user sign-up
userRouter.post(
  '/signup',
  expressAsyncHandler(async (req, res) => {
    // Create user with email and password using Firebase authentication
    createUserWithEmailAndPassword (auth, req.body.email, req.body.password)
      .then(async (userCredential) => {
        try {

          // Adding a new user document to the 'users' collection in Firestore
          const FullName = req.body.name;

          // addDoc() is an asynchronous function that adds a new document to the specified collection. Takes two arguments: the collection reference and an object representing the data to be added.
          // collection(db, 'users'): This creates a reference to the 'users' collection in Firestore database. The db variable represents the Firestore instance.
          // Since addDoc is an asynchronous function (returns a promise), the await used to wait for the promise to resolve before moving on to the next line.
          const docRef = await addDoc (collection(db, 'users'), {
            // Object passed to addDoc:
            // full name extracted from request body.
            // userId property is assigned the unique identifier (uid) of the authenticated user. Converted to a string using template literals.
            // initial value for is_admin, by default, new user isn't admin.
            FullName,
            userId: `${userCredential.user.uid}`,
            is_admin: false,
          });
          console.log('Document written with ID: ', docRef.id);   //docRef.id represents the unique identifier assigned to the newly created document.


        // Retrieving User Details from Firestore - queries the 'users' collection in Firestore to retrieve the user document with a matching userId (the unique identifier generated during user creation). It extracts user details from the Firestore document and constructs a user object.
          const usersRef = collection (db, 'users');

          const q = query(
            usersRef,
            limit(1),
            where('userId', '==', userCredential.user.uid)
          );

          getDocs(q).then((querySnapshot) =>
            querySnapshot.forEach((doc) => {

              const refUser = doc.data();
              const user = {
                _id: refUser.userId,
                name: refUser.FullName,
                email: req.body.email,
                isAdmin: refUser.is_admin,
                password: req.body.password,
              };

              // After extracting the user details, the code constructs a response object containing user information and a token generated. This response is then sent back to the client.
              res.send({
                _id: user._id,
                name: user.name,
                email: user.email,
                isAdmin: user.isAdmin,
                password: user.password,
                token: generateToken(user),   //  token generated using the generateToken function.
              });
            })
          );
        } catch (e) {
          console.log('Error adding document: ', e);
          res.status(401).send({ message: e });
        }
      })

      .catch((err) => {
        // Handle errors, e.g., user already exists
        console.log('Error:', err);
        res.status(401).send({ message: err });
      });
  })
);




/***************************************/

// Route to update user profile (Change password)
userRouter.put(
  '/profile',
  isAuth,
  expressAsyncHandler(async (req, res) => {
    // Sign in with email and old password using Firebase authentication
    signInWithEmailAndPassword(auth, req.body.email, req.body.oldPassword)
      .then((userCredential) => {
        // Update password in Firebase authentication
        updatePassword(auth.currentUser, req.body.password).then(() => {
          // Update successful. Retrieve updated user details from Firestore based on userId
          const usersRef = collection(db, 'users');
          
          const q = query(
            usersRef,
            limit(1),
            where('userId', '==', req.user._id)
          );

          getDocs(q).then((querySnapshot) =>
            querySnapshot.forEach((doc) => {
              const refUser = doc.data();
              const user = {
                _id: refUser.userId,
                name: refUser.FullName,
                email: req.body.email,
                isAdmin: refUser.is_admin,
                password: req.body.password,
              };

              // Send updated user details along with a token as a response
              res.send({
                _id: user._id,
                name: user.name,
                email: user.email,
                isAdmin: user.isAdmin,
                password: user.password,
                token: generateToken(user),
              });
            })
          );
        });
      })

      .catch((error) => {
        console.log(error);
        res.status(401).send({ message: error });
      });
  })
);




export default userRouter;