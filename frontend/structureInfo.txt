Breakdown of the structure and key functionalities of the React application -
 
 1. App.js:
    - Overview:
     - Main component file for the React application.
     - Contains the structure of the application, including routing, navigation, and state management.

   - Key Concepts:
     - State Management:
       - Utilizes React context API for state management with the `useContext` hook and a context named `Store`.
       - Manages global state using the `useReducer` hook and a `reducer` function.
       - Initial state is defined in `initialState` constant.

     - Routing:
       - Uses `react-router-dom` for routing with `BrowserRouter` as the router component.
       - Defines different routes for all screens using the `Route` component. (important).

     - User Authentication:
       - Handles user sign-in and sign-out actions using the `USER_SIGNIN` and `USER_SIGNOUT` types.
       - Conditional rendering based on user authentication status.

     - UI Components:
       - Includes a header, sidebar, main content area, and footer.
       - Bootstrap components are used for styling, such as `Navbar`, `Container`, `Button`, etc.

     - Asynchronous Operations:
       - Uses `useEffect` for fetching product categories from the server.


 2. Store.js:
   -Overview:
     - Manages global state using the React context API and `useReducer`.

   - Key Concepts:
     - Context Creation:
       - Creates a context named `Store` using `createContext`.
       - Provides a context provider (`StoreProvider`) to wrap the entire application.

     - State Initialization:
       - Initializes the state in `initialState` with user information, cart details, and other relevant data retrieved from local storage.

     - Reducer Function:
       - Implements a reducer function to handle state changes based on different action types.
       - Actions include adding/removing items from the cart, user sign-in/sign-out, saving shipping/payment information, etc.

     - Context Provider:
       - `StoreProvider` is a component that uses `useReducer` to manage the state and provides the state and dispatch function to its children via the `Store` context.



 3. index.js:
   - Overview:
     - Entry point for rendering the React application.

   - Key Concepts:
     - Root Rendering:
       - Uses `ReactDOM.createRoot` for concurrent mode rendering.
       - Renders the main `App` component wrapped in `StoreProvider`, `HelmetProvider`, and `PayPalScriptProvider`.

     - Global State Management:
       - `StoreProvider` wraps the entire application, providing global state management through the React context.

     - External Libraries:
       - Imports Bootstrap styles, `react-helmet-async` for managing document head, and `@paypal/react-paypal-js` for PayPal integration.


 Additional Notes:
- Axios: The code uses Axios for making asynchronous requests to the server.
- React-Router: Handles client-side routing to different components/screens in the application.
- Bootstrap Utilizes: Bootstrap for styling and UI components.
- PayPal Integration: Uses `@paypal/react-paypal-js` for integrating PayPal scripts into the application.
